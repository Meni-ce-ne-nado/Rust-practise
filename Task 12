fn gen_random_vector(n: usize) -> Vec<i32> {
    let mut seed = 12345; // Початкове значення для генератора
    let mut vec = Vec::with_capacity(n);

    for _ in 0..n {
        // Використовуємо простий псевдовипадковий генератор через написання коду в онлайн компіляторі
        seed = (seed * 37 + 23) % 90 + 10;  // Генерація числа в діапазоні [10..99]
        vec.push(seed);
    }

    vec
}

fn min_adjacent_sum(data: &[i32]) -> Option<(i32, usize)> {
    if data.len() < 2 {
        return None; // Якщо вектор містить менше двох елементів, то немає сусідніх пар
    }

    let mut min_sum = data[0] + data[1];
    let mut min_index = 0;

    for i in 1..data.len() - 1 {
        let sum = data[i] + data[i + 1];
        if sum < min_sum {
            min_sum = sum;
            min_index = i;
        }
    }

    Some((min_sum, min_index))
}

fn print_vector(data: &[i32]) {
    println!("Vector: {:?}", data);
}

fn main() {
    // Генеруємо вектор довжиною 20
    let vector = gen_random_vector(20);

    // Виводимо вектор
    print_vector(&vector);

    // Знаходимо мінімальну суму сусідніх елементів
    match min_adjacent_sum(&vector) {
        Some((sum, index)) => println!("Мінімальна сума сусідніх елементів: {} на індексах {} і {}", sum, index, index + 1),
        None => println!("Вектор занадто короткий для обчислення мінімальної пари."),
    }
}
